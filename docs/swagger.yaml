basePath: /v1
definitions:
  models.User:
    description: User base model with Roles array
    properties:
      created:
        example: "2024-01-01 00:01:22"
        type: string
      deleted_date:
        example: "2024-01-01 00:01:22"
        type: string
      email:
        example: someuser@name.com
        type: string
      first_name:
        example: Geoff
        type: string
      is_deleted:
        example: false
        type: boolean
      last_name:
        example: Goldblum
        type: string
      roles:
        example:
        - '[USER]'
        items:
          type: string
        type: array
      updated:
        example: "2024-01-01 00:01:22"
        type: string
      uuid:
        example: adcce0b7-0b38-4bd3-bfa1-d9bf7c4c79b4
        type: string
    type: object
  models.UserCreate:
    description: User Create Model
    properties:
      email:
        example: someuser@name.com
        type: string
      first_name:
        example: Geoff
        type: string
      last_name:
        example: Goldblum
        type: string
      roles:
        example:
        - '[USER]'
        items:
          type: string
        type: array
      uuid:
        example: adcce0b7-0b38-4bd3-bfa1-d9bf7c4c79b4
        type: string
    type: object
info:
  contact:
    name: DLzer
    url: https://github.com/Dlzer
  description: Boilerplate code for an Echo API
  title: Echo Boilerplate
  version: "1.0"
paths:
  /users:
    get:
      description: Accepts pagination query parameters, and returns a list of Users.
      parameters:
      - description: page number
        format: page
        in: query
        name: page
        type: integer
      - description: number of elements per page
        format: size
        in: query
        name: size
        type: integer
      - description: filter name
        format: orderBy
        in: query
        name: orderBy
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get user list
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Accepts a user create model
      parameters:
      - description: User
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Creates a User
      tags:
      - Users
  /users/{id}:
    delete:
      description: Accepts a user UUID as a path parameter, and returns a true or
        false body.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      summary: Deletes a user
      tags:
      - Users
    get:
      description: Accepts a UUID as a query parameter, and returns the User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Accepts a user to update, responds with the updated users
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: A user
        in: body
        name: payload
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Update a user
      tags:
      - Users
  /users/search:
    get:
      consumes:
      - application/json
      description: Accepts a user name as a query param, performs a tsvector search
        and returns a list of matches
      parameters:
      - description: filter name
        format: name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses: {}
      summary: Performs a TSVector Search
      tags:
      - Users
swagger: "2.0"
